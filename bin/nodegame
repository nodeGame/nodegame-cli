#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');

var J = require('JSUS').JSUS;

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

var root = path.resolve(__dirname, '..');
var templatesDir = root + '/templates/';

// Re-assign process.exit because of commander
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
    this.allowUnknownOption();
});

program
    .version(version)
    .usage('[options] [dir] [author] [author_email]')
    .option('    --git', 'add .gitignore')
    .option('-f, --force', 'force on non-empty directory')
    .parse(process.argv);

if (!exit.exited) {
    main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
    var old = obj[method];

    obj[method] = function () {
        fn.call(this);
        old.apply(this, arguments);
    };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
    var rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question(msg, function (input) {
        rl.close();
        callback(/^y|yes|ok|true$/i.test(input));
    });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} outDir
 */

function createGameDir(gameName, outDir, author, authorEmail) {
    var wait = 5;

    var d = new Date();
    var year = d.getFullYear();

    console.log();

    function substituteHeader(str) {
        str = str.replace('{AUTHOR}', author);
        str = str.replace('{AUTHOR_EMAIL}', authorEmail);
        str = str.replace('{YEAR}', year);
        return str;
    }

    function complete() {
        
        console.log();
        return;

        // TODO: See if we need more stuff here.

//        if (--wait) return;
//        var prompt = launchedFromCmd() ? '>' : '$';
//
//        console.log();
//        console.log('   install dependencies:');
//        console.log('     %s cd %s && npm install', prompt, outDir);
//        console.log();
//        console.log('   run the app:');
//
//        if (launchedFromCmd()) {
//            console.log('     %s SET DEBUG=%s:* & npm start', prompt, gameName);
//        } else {
//            console.log('     %s DEBUG=%s:* npm start', prompt, gameName);
//        }
//
//        console.log();
    }

    // Fix trailing slash.
    if (outDir.charAt(outDir.length) !== '/') {
        outDir = outDir += '/';
    }

    // Loading Templates.

    // AUTH.
    var auth = loadTemplate('auth/auth.js');
    var authSettings = loadTemplate('auth/auth.settings.js');
    var authCodes = loadTemplate('auth/codes.js');

    // CHANNEL.
    var channelSettings = loadTemplate('channel/channel.settings.js');

    // GAME.
    var gameStages = loadTemplate('game/game.stages.js');
    var gameSettings = loadTemplate('game/game.settings.js');
    var gameAhah = loadTemplate('game/game.ahah.js');

    // GAME / client_types.
    var typePlayer = loadTemplate('game/client_types/player.js');
    var typeBot = loadTemplate('game/client_types/bot.js');
    var typeLogic = loadTemplate('game/client_types/logic.js');
    var typePhantom = loadTemplate('game/client_types/phantom.js');

    // PUBLIC.
    var indexPage = loadTemplate('public/index.htm');

    // VIEWS.

    // WAITROOM.
    var waitroomSettings = loadTemplate('waitroom/waitroom.settings.js');
    var waitroom = loadTemplate('waitroom/waitroom.js');


    mkdir(outDir, function(){

        // AUTH.
        mkdir(outDir + 'auth', function() {
            auth = substituteHeader(auth);
            authSettings = substituteHeader(authSettings);

            auth = auth.replace('{NAME}', gameName);

            write(outDir + 'auth/auth.js', auth);
            write(outDir + 'auth/auth.settings.js', authSettings);
            write(outDir + 'auth/codes.js', authCodes);
            complete();
        });

        // CHANNEL.
        mkdir(outDir + 'channel', function() {
            channelSettings = substituteHeader(channelSettings);
            channelSettings = channelSettings.replace(/{NAME}/g, gameName);
            channelSettings = channelSettings.replace('{ADMIN}', gameName + '/admin');
            write(outDir + 'channel/channel.settings.js', channelSettings);
            complete();
        });

        // GAME.
        mkdir(outDir + 'game', function() {

            mkdir(outDir + 'game/client_types', function() {
                typePlayer = substituteHeader(typePlayer);
                typeBot = substituteHeader(typeBot);
                typeLogic = substituteHeader(typeLogic);
                typePhantom = substituteHeader(typePhantom);

                write(outDir + 'game/client_types/player.js', typePlayer);
                write(outDir + 'game/client_types/bot.js', typeBot);
                write(outDir + 'game/client_types/logic.js', typeLogic);
                write(outDir + 'game/client_types/phantom.js', typePhantom);
                complete();
            });

            gameStages = substituteHeader(gameStages);
            gameSettings = substituteHeader(gameSettings);
            gameAhah = substituteHeader(gameAhah);

            write(outDir + 'game/game.stages.js', gameStages);
            write(outDir + 'game/game.settings.js', gameSettings);
            write(outDir + 'game/game.ahah.js', gameAhah);
            complete();
        });

        // PUBLIC.
        mkdir(outDir + 'public', function() {
            write(outDir + 'public/index.htm', indexPage);
            complete();
        });

        // VIEWS.
        mkdir(outDir + 'views', function() {
            mkdir(outDir + 'views/contexts', function() {
                // Something.
                complete();
            });

            mkdir(outDir + 'views/templates', function() {
                // Something.
                complete();
            });

            complete();
        });
        
        // WAITROOM.
        mkdir(outDir + 'waitroom', function() {
            
            waitroom = substituteHeader(waitroom);
            waitroomSettings = substituteHeader(waitroomSettings);

            write(outDir + 'waitroom/waitroom.js', waitroom);
            write(outDir + 'waitroom/waitroom.settings.js', waitroomSettings);

            complete();
        });


        // Package.json
         var pkg = {
             name: gameName
             , version: '0.0.1'
             , description: 'This is a nodeGame game'
             , author: author + ' ' + '<' + authorEmail + '>' 
             , homepage: 'http://nodegame.org'
             , private: true
         }


        // sort dependencies like npm(1)
        // pkg.dependencies = sortedObject(pkg.dependencies);

        // write files
        write(outDir + 'package.json', JSON.stringify(pkg, null, 4));

        if (program.git) {
            write(outDir + '.gitignore',
                  fs.readFileSync(root + '/.gitignore', 'utf-8'));
        }
        
        complete();
    });
}

function copy_template(from, to) {
    from = path.join(__dirname, '..', 'templates', from);
    write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} dir
 * @param {Function} fn
 */

function emptyDirectory(dir, fn) {
    fs.readdir(dir, function(err, files){
        if (err && 'ENOENT' != err.code) throw err;
        fn(!files || !files.length);
    });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
    // flush output for Node.js Windows pipe bug
    // https://github.com/joyent/node/issues/6247 is just one bug example
    // https://github.com/visionmedia/mocha/issues/333 has a good discussion
    function done() {
        if (!(draining--)) _exit(code);
    }

    var draining = 0;
    var streams = [process.stdout, process.stderr];

    exit.exited = true;

    streams.forEach(function(stream){
        // submit empty write request and wait for completion
        draining += 1;
        stream.write('', done);
    });

    done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
    return process.platform === 'win32'
        && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
    return fs.readFileSync(
        path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {

    // Path
    var destinationPath = program.args.shift() || '.';

    var author, authorEmail;

    author = program.args[0] || 'author';
    authorEmail =  program.args[1] || 'email';

    // App name
    var appName = path.basename(path.resolve(destinationPath));

    // Generate application
    emptyDirectory(destinationPath, function(empty) {
        if (empty || program.force) {
            createGameDir(appName, destinationPath, author, authorEmail);
        }
        else {
            confirm(destinationPath + ' is not empty, continue? [y/N] ',
                    function (ok) {

                        if (ok) {
                            process.stdin.destroy();
                            createGameDir(appName, destinationPath,
                                          author, authorEmail);
                        }
                        else {
                            console.error('aborting');
                            exit(1);
                        }
                    });
        }
    });
}

/**
 * echo str > path.
 *
 * @param {String} filePath
 * @param {String} str
 */

function write(filePath, str, mode) {
    fs.writeFileSync(filePath, str, { mode: mode || 0666 });
    console.log('   \x1b[36mcreate\x1b[0m : ' + filePath);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(dir, fn) {
    mkdirp(dir, 0755, function(err){
        if (err) throw err;
        console.log('   \033[36mcreate\033[0m : ' + dir);
        fn && fn();
    });
}